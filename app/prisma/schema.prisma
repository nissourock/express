generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The question mark identifier on type modifier means that column can be null.
model payment_cycle {
  id              Int               @id @default(autoincrement())
  cycle_start     DateTime
  cycle_end       DateTime
  student_payment student_payment[]


}

model student_payment {
  id            Int           @id @default(autoincrement())
  cycle_id      Int
  payment_cycle payment_cycle @relation(fields: [cycle_id], references: [id], onDelete: NoAction)
  student_id    Int
  paid_amount   Int
  rest_amount   Int?
  student       student       @relation(fields: [student_id], references: [id], onDelete: NoAction)
  isPaid        Boolean       @default(false)

}

model private_session_payment {
  id                 Int             @id @default(autoincrement())
  private_session_id Int
  private_session    private_session @relation(fields: [private_session_id], references: [id], onDelete: NoAction)
  isPaid             Boolean
  paid_amount        Int
}

model assignment {
  id         Int     @id @default(autoincrement())
  student_id Int
  student    student @relation(fields: [student_id], references: [id], onDelete: NoAction)

  prof_id Int
  prof    prof @relation(fields: [prof_id], references: [id], onDelete: NoAction)

  course_id Int
  course    course @relation(fields: [course_id], references: [id], onDelete: NoAction)

  due_date DateTime
  comments Json?


}

model attendance_student {
  id         Int     @id @default(autoincrement())
  session_id Int
  student_id Int
  is_present Boolean
  session    session @relation(fields: [session_id], references: [id], onDelete: NoAction)
  student    student @relation(fields: [student_id], references: [id], onDelete: NoAction)
}

model course {
  id              Int               @id @default(autoincrement())
  course_name     String
  course_level_id Int
  description     String?
  level           level             @relation(fields: [course_level_id], references: [id], onDelete: NoAction)
  course_material course_material[]
  private_session private_session[]
  prof            prof[]
  session         session[]
  student_course  student_course[]
  assignment      assignment[]
}

model course_material {
  id                   Int     @id @default(autoincrement())
  material_title       String
  material_description String
  course_id            Int
  prof_id              Int
  course               course? @relation(fields: [course_id], references: [id], onDelete: Cascade)
  prof                 prof?   @relation(fields: [prof_id], references: [id], onDelete: Cascade)
}

model level {
  id              Int               @id @default(autoincrement())
  level_name      String            @db.VarChar(3)
  course          course[]
  private_session private_session[]
  prof            prof[]
  session         session[]
  student         student[]
}

model private_session {
  id                      Int                       @id @default(autoincrement())
  course_id               Int
  prof_id                 Int
  level_id                Int
  date_occurence          DateTime                  @default(now()) @db.Timestamp(6)
  student_id              Int
  course                  course                    @relation(fields: [course_id], references: [id], onDelete: NoAction)
  level                   level                     @relation(fields: [level_id], references: [id], onDelete: NoAction)
  prof                    prof                      @relation(fields: [prof_id], references: [id], onDelete: NoAction)
  student                 student                   @relation(fields: [student_id], references: [id], onDelete: NoAction)
  private_session_payment private_session_payment[]
}

model prof {
  id              Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  username        String            @default("please add me")
  level_teached   Int
  course_teached  Int
  role            String            @default("prof")
  password        String            @default("please add me")
  date_joined     DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  course          course            @relation(fields: [course_teached], references: [id], onDelete: NoAction)
  level           level             @relation(fields: [level_teached], references: [id], onDelete: NoAction)
  course_material course_material[]
  private_session private_session[]
  session         session[]
  assignment      assignment[]
}

model room {
  id            Int       @id @default(autoincrement())
  room_name     String?
  room_capacity String?
  session       session[]
}

model session {
  id                 Int                  @id @default(autoincrement())
  session_level      Int
  session_course     Int
  session_start      DateTime             @default(now()) @db.Timestamp(6)
  course_prof_name   Int?
  room_id            Int                  @default(1)
  prof               prof?                @relation(fields: [course_prof_name], references: [id], onDelete: NoAction)
  room               room                 @relation(fields: [room_id], references: [id], onDelete: NoAction)
  course             course               @relation(fields: [session_course], references: [id], onDelete: NoAction)
  level              level                @relation(fields: [session_level], references: [id], onDelete: NoAction)
  attendance_student attendance_student[]
}

model student {
  id          Int      @id @default(autoincrement())
  first_name  String
  last_name   String
  username    String   @default("please add me")
  date_joined DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
  level_id    Int      @default(3)
  password    String   @default("please add me")
  role        String   @default("student")
  level       level    @relation(fields: [level_id], references: [id], onDelete: NoAction)

  attendance_student attendance_student[]
  private_session    private_session[]
  student_course     student_course[]
  student_payment    student_payment[]
  student_info       student_info[]
  assignment         assignment[]

  @@index([id], map: "fki_student_level")
}

model student_info {
  id         Int     @id @default(autoincrement())
  student_id Int
  student    student @relation(fields: [student_id], references: [id], onDelete: NoAction)
  date_birth String?
  address    String?
  email      String?
  contacts   Json[]
  notes      Json[]




}

model admin {
  id           Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  username     String   @default("please add me")
  password     String   @default("please add me")
  date_created DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(6)
  role         String   @default("admin")
}

model student_course {
  id              Int       @id @default(autoincrement())
  date_enrollment DateTime? @default(now()) @db.Timestamp(6)
  course_id       Int?
  student_id      Int?
  course          course?   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student         student?  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
